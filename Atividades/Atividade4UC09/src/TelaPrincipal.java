
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class TelaPrincipal extends javax.swing.JFrame {
//vetor com o titulo das colunas

    private final String[] tableColumns = {"Data", "Hora", "Pressão Sistólica", "Pressão Diastólica", "Estresse"};

   
//caminho onde será salvo o histórico de medição
    private String caminho = "C://Histórico.txt";

    DefaultTableModel tableModel = new DefaultTableModel(tableColumns, 0);
//lista com as informações da pressão
    private List<MedicaoPressao> listaMedicao = new ArrayList<>();

    public TelaPrincipal() {
        initComponents();
        geraAcessibilidade();
        atualizarTxt();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        interfaceApp = new javax.swing.JLayeredPane();
        lblData = new javax.swing.JLabel();
        txtData = new javax.swing.JTextField();
        lblHora = new javax.swing.JLabel();
        txtHora = new javax.swing.JTextField();
        lblPressaoSis = new javax.swing.JLabel();
        txtPressaoSis = new javax.swing.JTextField();
        lblPressaoDis = new javax.swing.JLabel();
        txtPressaoDis = new javax.swing.JTextField();
        cbcEstresse = new javax.swing.JCheckBox();
        btnSalvar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHistorico = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tela Principal");

        interfaceApp.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Medição de Pressão", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14), new java.awt.Color(0, 51, 153))); // NOI18N
        interfaceApp.setToolTipText("Insira os seus dados para registro");

        lblData.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblData.setLabelFor(txtData);
        lblData.setText("Data:");
        lblData.setToolTipText("Data");

        txtData.setToolTipText("Data da Medição");
        txtData.setNextFocusableComponent(txtHora);

        lblHora.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblHora.setLabelFor(txtHora);
        lblHora.setText("Hora:");
        lblHora.setToolTipText("Hora");

        txtHora.setToolTipText("Hora da Medição");
        txtHora.setNextFocusableComponent(txtPressaoSis);
        txtHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHoraActionPerformed(evt);
            }
        });

        lblPressaoSis.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblPressaoSis.setLabelFor(txtPressaoSis);
        lblPressaoSis.setText("Pressão sistólica:");
        lblPressaoSis.setToolTipText("Pressão Sistólica");

        txtPressaoSis.setToolTipText("Informe o valores da Pressão SIS");
        txtPressaoSis.setNextFocusableComponent(txtPressaoDis);

        lblPressaoDis.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblPressaoDis.setLabelFor(txtPressaoDis);
        lblPressaoDis.setText("Pressão Diastólica:");
        lblPressaoDis.setToolTipText("Pressão Diastólica");

        txtPressaoDis.setToolTipText("Informe os valores da Pressão DIS");
        txtPressaoDis.setNextFocusableComponent(cbcEstresse);

        cbcEstresse.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbcEstresse.setText("Em situação de estresse.");
        cbcEstresse.setToolTipText("Você está numa situação de Estresse");
        cbcEstresse.setNextFocusableComponent(btnSalvar);

        btnSalvar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.setToolTipText("Cliquei para salvar as Informações");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        interfaceApp.setLayer(lblData, javax.swing.JLayeredPane.DEFAULT_LAYER);
        interfaceApp.setLayer(txtData, javax.swing.JLayeredPane.DEFAULT_LAYER);
        interfaceApp.setLayer(lblHora, javax.swing.JLayeredPane.DEFAULT_LAYER);
        interfaceApp.setLayer(txtHora, javax.swing.JLayeredPane.DEFAULT_LAYER);
        interfaceApp.setLayer(lblPressaoSis, javax.swing.JLayeredPane.DEFAULT_LAYER);
        interfaceApp.setLayer(txtPressaoSis, javax.swing.JLayeredPane.DEFAULT_LAYER);
        interfaceApp.setLayer(lblPressaoDis, javax.swing.JLayeredPane.DEFAULT_LAYER);
        interfaceApp.setLayer(txtPressaoDis, javax.swing.JLayeredPane.DEFAULT_LAYER);
        interfaceApp.setLayer(cbcEstresse, javax.swing.JLayeredPane.DEFAULT_LAYER);
        interfaceApp.setLayer(btnSalvar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout interfaceAppLayout = new javax.swing.GroupLayout(interfaceApp);
        interfaceApp.setLayout(interfaceAppLayout);
        interfaceAppLayout.setHorizontalGroup(
            interfaceAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(interfaceAppLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(interfaceAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(interfaceAppLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(interfaceAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(interfaceAppLayout.createSequentialGroup()
                                .addComponent(lblData)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtData))
                            .addGroup(interfaceAppLayout.createSequentialGroup()
                                .addComponent(lblHora)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(interfaceAppLayout.createSequentialGroup()
                        .addGroup(interfaceAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPressaoSis)
                            .addComponent(lblPressaoDis))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(interfaceAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(interfaceAppLayout.createSequentialGroup()
                                .addComponent(txtPressaoDis, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(btnSalvar)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(interfaceAppLayout.createSequentialGroup()
                                .addComponent(txtPressaoSis, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(interfaceAppLayout.createSequentialGroup()
                        .addComponent(cbcEstresse)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        interfaceAppLayout.setVerticalGroup(
            interfaceAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(interfaceAppLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(interfaceAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(interfaceAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHora)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(interfaceAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPressaoSis)
                    .addComponent(txtPressaoSis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(interfaceAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(interfaceAppLayout.createSequentialGroup()
                        .addGroup(interfaceAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPressaoDis)
                            .addComponent(txtPressaoDis, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, interfaceAppLayout.createSequentialGroup()
                        .addComponent(btnSalvar)
                        .addGap(6, 6, 6)))
                .addComponent(cbcEstresse)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        btnSalvar.getAccessibleContext().setAccessibleDescription("Botao Salvar");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Histórico", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14), new java.awt.Color(0, 51, 153))); // NOI18N
        jPanel1.setToolTipText("Histórico de Medição de Pressão");

        tblHistorico.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblHistorico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Hora", "Pressão Sistólica", "Pressão Diastólica", "Estresse"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblHistorico.setToolTipText("Histórico de medição");
        jScrollPane1.setViewportView(tblHistorico);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(interfaceApp))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(interfaceApp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        // TODO add your handling code here:

        if (!emptyFields()) {

            inserirMedicao(getMedicao());

            txtData.setText("");
            txtHora.setText("");
            txtPressaoSis.setText("");
            txtPressaoDis.setText("");
            cbcEstresse.setSelected(false);

            txtData.requestFocus();

            // AtualizarArquivoTxt();
        }


    }//GEN-LAST:event_btnSalvarActionPerformed

    private void txtHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHoraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHoraActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalvar;
    private javax.swing.JCheckBox cbcEstresse;
    private javax.swing.JLayeredPane interfaceApp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblHora;
    private javax.swing.JLabel lblPressaoDis;
    private javax.swing.JLabel lblPressaoSis;
    private javax.swing.JTable tblHistorico;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtPressaoDis;
    private javax.swing.JTextField txtPressaoSis;
    // End of variables declaration//GEN-END:variables

    //metodo que gera o atalho do teclado 
    public void geraAcessibilidade() {
        btnSalvar.setMnemonic(KeyEvent.VK_D);
    }

    //metodo que retorna a medição
    private MedicaoPressao getMedicao() {

        MedicaoPressao Medicao = new MedicaoPressao();

        Medicao.setData(txtData.getText());
        Medicao.setHora(txtHora.getText());
        Medicao.setPressaoSis(Integer.parseInt(txtPressaoSis.getText()));
        Medicao.setPressaoDis(Integer.parseInt(txtPressaoDis.getText()));

        if (cbcEstresse.isSelected()) {
            Medicao.setSobreEstresse("Sim");
        } else {
            Medicao.setSobreEstresse("Não");
        }

        return Medicao;
    }

    //metodo de validação, se está vazio ou em formato inválido
    private boolean emptyFields() {

        boolean empty = true;

        String testeData = txtData.getText();
        boolean palavraData = testeData.matches("[0-9]{2}[/][0-9]{2}[/][0-9]{2}");
        String testeHora = txtHora.getText();
        boolean palavraHora = testeHora.matches("[0-9]{2}[:][0-9]{2}");

        if (txtData.getText().trim().isEmpty() || (palavraData == false)) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Data não pode ser vazio. Informe a data no formato xx/xx/xx");
        } else if (txtHora.getText().trim().isEmpty() || (palavraHora == false)) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Hora não pode ser vazio. Informe HORA no formato 24 horas xx:xx");
        } else if (txtPressaoSis.getText().trim().isEmpty() || (Integer.parseInt(txtPressaoSis.getText()) == 0) || Integer.parseInt(txtPressaoSis.getText()) <= 0) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Pressão Sistólica não pode ser vazio, zero ou negativo.");
        } else if (txtPressaoSis.getText().length() > 3) {
            JOptionPane.showMessageDialog(rootPane, "Informe pressão sistólica válida, até 3 digitos");
        } else if ((txtPressaoDis.getText().trim().isEmpty()) || (Integer.parseInt(txtPressaoDis.getText()) == 0) || Integer.parseInt(txtPressaoDis.getText()) <= 0) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Pressão Diastólica não pode ser vazio, zero ou negativo.");
        } else if (txtPressaoDis.getText().length() > 3) {
            JOptionPane.showMessageDialog(rootPane, "Informe pressão diastólica válida, até 3 digitos");
        } else {

            empty = false;
        }

        return empty;
    }

    //Adiciona a informação da medição na lista e Atualiza a tabela.
    private void inserirMedicao(MedicaoPressao Medicao) {
        listaMedicao.add(Medicao);
        atualizarTabela();
    }

    private void atualizarTabela() {

        String conteudoTxt = "";

        if (!listaMedicao.isEmpty()) {

            MedicaoPressao Medicao;

            tableModel = new DefaultTableModel(tableColumns, 0);

            for (int i = 0; i < listaMedicao.size(); i++) {

                Medicao = listaMedicao.get(i);

                String[] rowData = {Medicao.getData(), Medicao.getHora(), String.valueOf(Medicao.getPressaoSis()), String.valueOf(Medicao.getPressaoDis()), Medicao.getSobreEstresse()};

                conteudoTxt += Medicao.getData() + ";" + Medicao.getHora() + ";" + String.valueOf(Medicao.getPressaoSis()) + ";" + String.valueOf(Medicao.getPressaoDis()) + ";" + Medicao.getSobreEstresse() + "\n";

                tableModel.addRow(rowData);
            }

            tblHistorico.setModel(tableModel);
        } else {

            tableModel = new DefaultTableModel(tableColumns, 0);
            tblHistorico.setModel(tableModel);
        }

        try {
            FileWriter escreva = new FileWriter(this.caminho);
            escreva.write(conteudoTxt);
            escreva.close();
        } catch (IOException e) {
            System.out.println("Ocorreu um erro. " + e.getMessage());
        }
    }

    public void atualizarTxt() {
        try {
            File obj = new File(this.caminho);
            Scanner Reader = new Scanner(obj);
            while (Reader.hasNextLine()) {
                String data = Reader.nextLine();
                List<String> lineData = Arrays.asList(data.split(";"));

                MedicaoPressao medicao = new MedicaoPressao();

                medicao.setData(lineData.get(0));
                medicao.setHora(lineData.get(1));
                medicao.setPressaoSis(Integer.parseInt(lineData.get(2)));
                medicao.setPressaoDis(Integer.parseInt(lineData.get(3)));
                medicao.setSobreEstresse(lineData.get(4));
                listaMedicao.add(medicao);

            }
            Reader.close();

        } catch (IOException e) {
            System.out.println("Ocorreu um erro." + e.getMessage());
        }

    }

}
